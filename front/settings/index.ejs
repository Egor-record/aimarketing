<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üêï Boris Bot Settings</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/vue@3.5.13/dist/vue.global.min.js "></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
    <!-- Yandex.Metrika counter -->
    <script type="text/javascript" >
        (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
        m[i].l=1*new Date();
        for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
        k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
        (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");
    
        ym(99992684, "init", {
            clickmap:true,
            trackLinks:true,
            accurateTrackBounce:true
        });
    </script>
    <noscript><div><img src="https://mc.yandex.ru/watch/99992684" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
    <!-- /Yandex.Metrika counter -->
    <style>
        body {
            background: #edf2f9;
            font-family: "Poppins", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"
        }
        .settings {
            background-color:white;
            box-shadow: rgba(65, 69, 88, 0.1) 0px 7px 14px 0px, rgba(0, 0, 0, 0.07) 0px 3px 6px 0px;
            border-radius: 4px;
        }
        .fade-enter-active, .fade-leave-active {
            transition: opacity 0.2s ease-in-out;
        }
        .fade-enter-from, .fade-leave-to {
            opacity: 0;
        }
    </style>
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const viewData = {
            temperature: <%= temperature %>,
            maxLength: <%= maxLength %>,
            isOwnKey: <%= isOwnKey %>,
            currentModel: <%= modelSelected %>,
            keepHistory: <%= keepHistory %>,
            secretKey: "<%= secretKey %>",
            linkID: urlParams.get('id'),
            telegramID: urlParams.get('telegramid')
        }
    </script>
</head>
<body>
    <div id="app">
        <div class="container">   
            <section class="mt-3 settings p-4">
                <h1>
                    üêï Boris Bot Settings
                </h1>
                <div class="mt-3">
                    <div>
                        <label for="temperature" class="form-label">Temperature: {{ temperature }}</label>
                        <input 
                            @blur="updateTemperature"
                            type="range" 
                            class="form-range" 
                            min="0" 
                            max="10" 
                            step="1" 
                            id="temperature" 
                            v-model="temperature"
                        >
                    </div>
                    <div class="mt-4">
                        <p>AI Model {{ AiModel }}</p>
                        <div v-for="(option, index) in modelOptions" :key="option.value" class="form-check">
                            <input
                                @change="updateModel" 
                                class="form-check-input" 
                                type="radio" 
                                name="flexRadioDefault" 
                                :id="'radio' + index" 
                                :value="option.value" 
                                v-model="AiModel"
                            >
                            <label class="form-check-label" :for="'radio' + index">
                                {{ option.label }}
                            </label>
                        </div>
                    </div>
                    <div class="mt-4">
                        <p>Maximum bot response length</p>
                        <input
                            @change="updateMaxLength"  
                            type="number" 
                            class="form-control" 
                            v-model="maxPrompt">
                    </div>
                    <div class="form-check form-switch mt-4">
                        <input 
                            v-model="usingKey" 
                            class="form-check-input" 
                            type="checkbox" 
                            role="switch" 
                            id="flexSwitchCheckDefault">
                        <label class="form-check-label" for="flexSwitchCheckDefault">Using own key</label>
                        <transition name="fade">
                            <div v-show="usingKey" class="mb-3 mt-2 needs-validation">
                                <label for="secret_key" class="form-label">Secret Key</label>
                                <input v-model="secretKey" type="text" class="form-control" id="secret_key" placeholder="Open AI Secret Key">
                                <div class="invalid-feedback">
                                    Please provide a valid key.
                                </div>
                                <div class="valid-feedback">
                                    Key saved.
                                </div>
                                <small class="mt-2">You won't be able to see secret key once you press save</small>
                                <button @click="saveSecretKey" class="btn btn-success mt-3">Save</button>
                            </div>  
                        </transition>                    
                    </div>
                    <div class="form-check form-switch mt-4">
                        <input v-model="keepHistory" class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                        <label class="form-check-label" for="flexSwitchCheckDefault">Keep conversation history</label>
                    </div>
                </div>
            </section>
        </div>
    </div>
    <script>
        const { createApp, ref, onMounted } = Vue;  
        createApp({
            setup() {
                const modelOptions = ref([]);
                const temperature = ref(viewData.temperature);
                const maxPrompt = ref(viewData.maxLength);
                const usingKey = ref(viewData.isOwnKey);
                const secretKey = ref(viewData.secretKey);
                const keepHistory = ref(viewData.keepHistory);
                const AiModel = ref("");

                const fetchModels = async () => {
                    try {
                        const response = await fetch('/settings/models');
                        const data = await response.json();
                        AiModel.value = data[viewData.currentModel]
                        modelOptions.value = Object.values(data).map(model => ({
                            value: model,
                            label: model
                        }));
                    } catch (error) {
                        console.error('Error fetching models:', error);
                    }
                };
                onMounted(fetchModels);

                const updateTemperature = async () => {
                    await updateValue(temperature, temperature.value)
                };

                const updateModel = async () => {
                    await updateValue(AiModel, AiModel.value)
                }

                const updateMaxLength = async () => {
                    await updateValue(maxPrompt, maxPrompt.value)
                }

                const saveSecretKey = async () => {
                    await updateValue(secretKey, secretKey.value)
                }

                const updateValue = async (name, value) => {
                    try {
                        const response = await fetch("/settings/update", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ name: value })
                        });

                        const result = await response.json();
                    } catch (error) {
                        console.error("Error updating temperature:", error);
                    }
                }

                return {
                    temperature,
                    AiModel,
                    modelOptions,
                    maxPrompt,
                    usingKey,
                    secretKey,
                    keepHistory,
                    updateTemperature,
                    updateModel,
                    updateMaxLength
                };
            }
        }).mount('#app');

    </script>
</body>
</html>